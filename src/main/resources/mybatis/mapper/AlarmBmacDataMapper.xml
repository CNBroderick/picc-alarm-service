<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ape.alarm.entity.mapper.AlarmBmacDataMapper">
  <resultMap id="BaseResultMap" type="ape.alarm.entity.po.AlarmBmacData">
    <!--@mbg.generated-->
    <!--@Table `tb_alarm_bmac_data`-->
    <id column="d_id" jdbcType="INTEGER" property="id"/>
    <result column="d_aid" jdbcType="INTEGER" property="aid"/>
    <result column="d_code" jdbcType="INTEGER" property="code"/>
    <result column="d_restore_code" jdbcType="INTEGER" property="restoreCode"/>
    <result column="d_request" jdbcType="VARCHAR" property="request" typeHandler="ape.alarm.entity.typehandler.JsonObjectTypeHandler"/>
    <result column="d_response" jdbcType="VARCHAR" property="response" typeHandler="ape.alarm.entity.typehandler.JsonObjectTypeHandler"/>
    <result column="d_restore_request" jdbcType="VARCHAR" property="restoreRequest" typeHandler="ape.alarm.entity.typehandler.JsonObjectTypeHandler"/>
    <result column="d_restore_response" jdbcType="VARCHAR" property="restoreResponse"
            typeHandler="ape.alarm.entity.typehandler.JsonObjectTypeHandler"/>
    <result column="d_request_exception" jdbcType="LONGVARCHAR" property="requestException"/>
    <result column="d_restore_exception" jdbcType="LONGVARCHAR" property="restoreException"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--@mbg.generated-->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
            <foreach collection="criteria.requestCriteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler} and #{criterion.secondValue,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                  </foreach>
                </when>
              </choose>
            </foreach>
            <foreach collection="criteria.responseCriteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler} and #{criterion.secondValue,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                  </foreach>
                </when>
              </choose>
            </foreach>
            <foreach collection="criteria.restoreRequestCriteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler} and #{criterion.secondValue,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                  </foreach>
                </when>
              </choose>
            </foreach>
            <foreach collection="criteria.restoreResponseCriteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler} and #{criterion.secondValue,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--@mbg.generated-->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
            <foreach collection="criteria.requestCriteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler} and #{criterion.secondValue,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                  </foreach>
                </when>
              </choose>
            </foreach>
            <foreach collection="criteria.responseCriteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler} and #{criterion.secondValue,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                  </foreach>
                </when>
              </choose>
            </foreach>
            <foreach collection="criteria.restoreRequestCriteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler} and #{criterion.secondValue,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                  </foreach>
                </when>
              </choose>
            </foreach>
            <foreach collection="criteria.restoreResponseCriteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler} and #{criterion.secondValue,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    d_id, d_aid, d_code, d_restore_code, d_request, d_response, d_restore_request, d_restore_response,
    d_request_exception, d_restore_exception
  </sql>
  <select id="selectByExample" parameterType="ape.alarm.entity.po.AlarmBmacDataExample" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_alarm_bmac_data
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from tb_alarm_bmac_data
    where d_id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from tb_alarm_bmac_data
    where d_id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="ape.alarm.entity.po.AlarmBmacDataExample">
    <!--@mbg.generated-->
    delete from tb_alarm_bmac_data
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="ape.alarm.entity.po.AlarmBmacData">
    <!--@mbg.generated-->
    insert into tb_alarm_bmac_data (d_id, d_aid, d_code,
    d_restore_code, d_request,
    d_response,
    d_restore_request,
    d_restore_response,
    d_request_exception, d_restore_exception
    )
    values (#{id,jdbcType=INTEGER}, #{aid,jdbcType=INTEGER}, #{code,jdbcType=INTEGER},
    #{restoreCode,jdbcType=INTEGER}, #{request,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    #{response,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    #{restoreRequest,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    #{restoreResponse,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    #{requestException,jdbcType=LONGVARCHAR}, #{restoreException,jdbcType=LONGVARCHAR}
    )
  </insert>
  <insert id="insertSelective" parameterType="ape.alarm.entity.po.AlarmBmacData">
    <!--@mbg.generated-->
    insert into tb_alarm_bmac_data
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        d_id,
      </if>
      <if test="aid != null">
        d_aid,
      </if>
      <if test="code != null">
        d_code,
      </if>
      <if test="restoreCode != null">
        d_restore_code,
      </if>
      <if test="request != null">
        d_request,
      </if>
      <if test="response != null">
        d_response,
      </if>
      <if test="restoreRequest != null">
        d_restore_request,
      </if>
      <if test="restoreResponse != null">
        d_restore_response,
      </if>
      <if test="requestException != null">
        d_request_exception,
      </if>
      <if test="restoreException != null">
        d_restore_exception,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="aid != null">
        #{aid,jdbcType=INTEGER},
      </if>
      <if test="code != null">
        #{code,jdbcType=INTEGER},
      </if>
      <if test="restoreCode != null">
        #{restoreCode,jdbcType=INTEGER},
      </if>
      <if test="request != null">
        #{request,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="response != null">
        #{response,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="restoreRequest != null">
        #{restoreRequest,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="restoreResponse != null">
        #{restoreResponse,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="requestException != null">
        #{requestException,jdbcType=LONGVARCHAR},
      </if>
      <if test="restoreException != null">
        #{restoreException,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="ape.alarm.entity.po.AlarmBmacDataExample" resultType="java.lang.Long">
    <!--@mbg.generated-->
    select count(*) from tb_alarm_bmac_data
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--@mbg.generated-->
    update tb_alarm_bmac_data
    <set>
      <if test="record.id != null">
        d_id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.aid != null">
        d_aid = #{record.aid,jdbcType=INTEGER},
      </if>
      <if test="record.code != null">
        d_code = #{record.code,jdbcType=INTEGER},
      </if>
      <if test="record.restoreCode != null">
        d_restore_code = #{record.restoreCode,jdbcType=INTEGER},
      </if>
      <if test="record.request != null">
        d_request = #{record.request,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="record.response != null">
        d_response = #{record.response,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="record.restoreRequest != null">
        d_restore_request = #{record.restoreRequest,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="record.restoreResponse != null">
        d_restore_response = #{record.restoreResponse,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="record.requestException != null">
        d_request_exception = #{record.requestException,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.restoreException != null">
        d_restore_exception = #{record.restoreException,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--@mbg.generated-->
    update tb_alarm_bmac_data
    set d_id = #{record.id,jdbcType=INTEGER},
    d_aid = #{record.aid,jdbcType=INTEGER},
    d_code = #{record.code,jdbcType=INTEGER},
    d_restore_code = #{record.restoreCode,jdbcType=INTEGER},
    d_request = #{record.request,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    d_response = #{record.response,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    d_restore_request = #{record.restoreRequest,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    d_restore_response = #{record.restoreResponse,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    d_request_exception = #{record.requestException,jdbcType=LONGVARCHAR},
    d_restore_exception = #{record.restoreException,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="ape.alarm.entity.po.AlarmBmacData">
    <!--@mbg.generated-->
    update tb_alarm_bmac_data
    <set>
      <if test="aid != null">
        d_aid = #{aid,jdbcType=INTEGER},
      </if>
      <if test="code != null">
        d_code = #{code,jdbcType=INTEGER},
      </if>
      <if test="restoreCode != null">
        d_restore_code = #{restoreCode,jdbcType=INTEGER},
      </if>
      <if test="request != null">
        d_request = #{request,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="response != null">
        d_response = #{response,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="restoreRequest != null">
        d_restore_request = #{restoreRequest,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="restoreResponse != null">
        d_restore_response = #{restoreResponse,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="requestException != null">
        d_request_exception = #{requestException,jdbcType=LONGVARCHAR},
      </if>
      <if test="restoreException != null">
        d_restore_exception = #{restoreException,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where d_id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="ape.alarm.entity.po.AlarmBmacData">
    <!--@mbg.generated-->
    update tb_alarm_bmac_data
    set d_aid = #{aid,jdbcType=INTEGER},
    d_code = #{code,jdbcType=INTEGER},
    d_restore_code = #{restoreCode,jdbcType=INTEGER},
    d_request = #{request,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    d_response = #{response,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    d_restore_request = #{restoreRequest,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    d_restore_response = #{restoreResponse,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    d_request_exception = #{requestException,jdbcType=LONGVARCHAR},
    d_restore_exception = #{restoreException,jdbcType=LONGVARCHAR}
    where d_id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateRequestById">
        <!--@mbg.generated-->
        update tb_alarm_bmac_data
        set d_request=#{updatedRequest,jdbcType=VARCHAR}
        where d_id=#{id,jdbcType=INTEGER}
    </update>
  <update id="updateCodeAndResponseById">
    <!--@mbg.generated-->
    UPDATE `tb_alarm_bmac_data`
    SET `d_code`=#{updatedCode,jdbcType=INTEGER}, `d_response`=#{updatedResponse,jdbcType=VARCHAR}
    WHERE `d_id`=#{id,jdbcType=INTEGER}
  </update>
  <select id="getById" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    SELECT
    <include refid="Base_Column_List"/>
    FROM `tb_alarm_bmac_data`
    WHERE `d_id`=#{id,jdbcType=INTEGER}
  </select>
  <update id="updateRequestExceptionById">
    <!--@mbg.generated-->
    UPDATE `tb_alarm_bmac_data`
    SET `d_request_exception`=#{updatedRequestException,jdbcType=LONGVARCHAR}
    WHERE `d_id`=#{id,jdbcType=INTEGER}
  </update>
  <update id="updateRestoreExceptionById">
    <!--@mbg.generated-->
    UPDATE `tb_alarm_bmac_data`
    SET `d_restore_exception`=#{updatedRestoreException,jdbcType=LONGVARCHAR}
    WHERE `d_id`=#{id,jdbcType=INTEGER}
  </update>
  <update id="updateBatch" parameterType="java.util.List">
    <!--@mbg.generated-->
    update tb_alarm_bmac_data
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="d_aid = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when d_id = #{item.id,jdbcType=INTEGER} then #{item.aid,jdbcType=INTEGER}
        </foreach>
      </trim>
      <trim prefix="d_code = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when d_id = #{item.id,jdbcType=INTEGER} then #{item.code,jdbcType=INTEGER}
        </foreach>
      </trim>
      <trim prefix="d_restore_code = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when d_id = #{item.id,jdbcType=INTEGER} then #{item.restoreCode,jdbcType=INTEGER}
        </foreach>
      </trim>
      <trim prefix="d_request = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when d_id = #{item.id,jdbcType=INTEGER} then #{item.request,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
        </foreach>
      </trim>
      <trim prefix="d_response = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when d_id = #{item.id,jdbcType=INTEGER} then #{item.response,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
        </foreach>
      </trim>
      <trim prefix="d_restore_request = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when d_id = #{item.id,jdbcType=INTEGER} then
          #{item.restoreRequest,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
        </foreach>
      </trim>
      <trim prefix="d_restore_response = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when d_id = #{item.id,jdbcType=INTEGER} then
          #{item.restoreResponse,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
        </foreach>
      </trim>
      <trim prefix="d_request_exception = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when d_id = #{item.id,jdbcType=INTEGER} then #{item.requestException,jdbcType=LONGVARCHAR}
        </foreach>
      </trim>
      <trim prefix="d_restore_exception = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          when d_id = #{item.id,jdbcType=INTEGER} then #{item.restoreException,jdbcType=LONGVARCHAR}
        </foreach>
      </trim>
    </trim>
    where d_id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id,jdbcType=INTEGER}
    </foreach>
  </update>
  <update id="updateBatchSelective" parameterType="java.util.List">
    <!--@mbg.generated-->
    update tb_alarm_bmac_data
    <trim prefix="set" suffixOverrides=",">
      <trim prefix="d_aid = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.aid != null">
            when d_id = #{item.id,jdbcType=INTEGER} then #{item.aid,jdbcType=INTEGER}
          </if>
        </foreach>
      </trim>
      <trim prefix="d_code = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.code != null">
            when d_id = #{item.id,jdbcType=INTEGER} then #{item.code,jdbcType=INTEGER}
          </if>
        </foreach>
      </trim>
      <trim prefix="d_restore_code = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.restoreCode != null">
            when d_id = #{item.id,jdbcType=INTEGER} then #{item.restoreCode,jdbcType=INTEGER}
          </if>
        </foreach>
      </trim>
      <trim prefix="d_request = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.request != null">
            when d_id = #{item.id,jdbcType=INTEGER} then #{item.request,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
          </if>
        </foreach>
      </trim>
      <trim prefix="d_response = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.response != null">
            when d_id = #{item.id,jdbcType=INTEGER} then #{item.response,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
          </if>
        </foreach>
      </trim>
      <trim prefix="d_restore_request = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.restoreRequest != null">
            when d_id = #{item.id,jdbcType=INTEGER} then #{item.restoreRequest,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
          </if>
        </foreach>
      </trim>
      <trim prefix="d_restore_response = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.restoreResponse != null">
            when d_id = #{item.id,jdbcType=INTEGER} then
            #{item.restoreResponse,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler}
          </if>
        </foreach>
      </trim>
      <trim prefix="d_request_exception = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.requestException != null">
            when d_id = #{item.id,jdbcType=INTEGER} then #{item.requestException,jdbcType=LONGVARCHAR}
          </if>
        </foreach>
      </trim>
      <trim prefix="d_restore_exception = case" suffix="end,">
        <foreach collection="list" index="index" item="item">
          <if test="item.restoreException != null">
            when d_id = #{item.id,jdbcType=INTEGER} then #{item.restoreException,jdbcType=LONGVARCHAR}
          </if>
        </foreach>
      </trim>
    </trim>
    where d_id in
    <foreach close=")" collection="list" item="item" open="(" separator=", ">
      #{item.id,jdbcType=INTEGER}
    </foreach>
  </update>
  <insert id="batchInsert" parameterType="map">
    <!--@mbg.generated-->
    insert into tb_alarm_bmac_data
    (d_id, d_aid, d_code, d_restore_code, d_request, d_response, d_restore_request, d_restore_response,
    d_request_exception, d_restore_exception)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=INTEGER}, #{item.aid,jdbcType=INTEGER}, #{item.code,jdbcType=INTEGER},
      #{item.restoreCode,jdbcType=INTEGER}, #{item.request,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      #{item.response,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      #{item.restoreRequest,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      #{item.restoreResponse,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      #{item.requestException,jdbcType=LONGVARCHAR}, #{item.restoreException,jdbcType=LONGVARCHAR}
        )
    </foreach>
  </insert>
  <insert id="insertOrUpdate" parameterType="ape.alarm.entity.po.AlarmBmacData">
    <!--@mbg.generated-->
    INSERT INTO `tb_alarm_bmac_data`
    (`d_id`, `d_aid`, `d_code`, `d_restore_code`, `d_request`, `d_response`, `d_restore_request`, `d_restore_response`,
    `d_request_exception`, `d_restore_exception`)
    VALUES
    (#{id,jdbcType=INTEGER}, #{aid,jdbcType=INTEGER}, #{code,jdbcType=INTEGER}, #{restoreCode,jdbcType=INTEGER},
    #{request,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    #{response,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    #{restoreRequest,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    #{restoreResponse,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    #{requestException,jdbcType=LONGVARCHAR}, #{restoreException,jdbcType=LONGVARCHAR}
    )
    ON DUPLICATE KEY UPDATE
    `d_id` = #{id,jdbcType=INTEGER},
    `d_aid` = #{aid,jdbcType=INTEGER},
    `d_code` = #{code,jdbcType=INTEGER},
    `d_restore_code` = #{restoreCode,jdbcType=INTEGER},
    `d_request` = #{request,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    `d_response` = #{response,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    `d_restore_request` = #{restoreRequest,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    `d_restore_response` = #{restoreResponse,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
    `d_request_exception` = #{requestException,jdbcType=LONGVARCHAR},
    `d_restore_exception` = #{restoreException,jdbcType=LONGVARCHAR}
  </insert>
  <insert id="insertOrUpdateSelective" parameterType="ape.alarm.entity.po.AlarmBmacData">
    <!--@mbg.generated-->
    insert into tb_alarm_bmac_data
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        d_id,
      </if>
      <if test="aid != null">
        d_aid,
      </if>
      <if test="code != null">
        d_code,
      </if>
      <if test="restoreCode != null">
        d_restore_code,
      </if>
      <if test="request != null">
        d_request,
      </if>
      <if test="response != null">
        d_response,
      </if>
      <if test="restoreRequest != null">
        d_restore_request,
      </if>
      <if test="restoreResponse != null">
        d_restore_response,
      </if>
      <if test="requestException != null">
        d_request_exception,
      </if>
      <if test="restoreException != null">
        d_restore_exception,
      </if>
    </trim>
    values
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="aid != null">
        #{aid,jdbcType=INTEGER},
      </if>
      <if test="code != null">
        #{code,jdbcType=INTEGER},
      </if>
      <if test="restoreCode != null">
        #{restoreCode,jdbcType=INTEGER},
      </if>
      <if test="request != null">
        #{request,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="response != null">
        #{response,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="restoreRequest != null">
        #{restoreRequest,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="restoreResponse != null">
        #{restoreResponse,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="requestException != null">
        #{requestException,jdbcType=LONGVARCHAR},
      </if>
      <if test="restoreException != null">
        #{restoreException,jdbcType=LONGVARCHAR},
      </if>
    </trim>
    on duplicate key update 
    <trim suffixOverrides=",">
      <if test="id != null">
        d_id = #{id,jdbcType=INTEGER},
      </if>
      <if test="aid != null">
        d_aid = #{aid,jdbcType=INTEGER},
      </if>
      <if test="code != null">
        d_code = #{code,jdbcType=INTEGER},
      </if>
      <if test="restoreCode != null">
        d_restore_code = #{restoreCode,jdbcType=INTEGER},
      </if>
      <if test="request != null">
        d_request = #{request,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="response != null">
        d_response = #{response,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="restoreRequest != null">
        d_restore_request = #{restoreRequest,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="restoreResponse != null">
        d_restore_response = #{restoreResponse,jdbcType=VARCHAR,typeHandler=ape.alarm.entity.typehandler.JsonObjectTypeHandler},
      </if>
      <if test="requestException != null">
        d_request_exception = #{requestException,jdbcType=LONGVARCHAR},
      </if>
      <if test="restoreException != null">
        d_restore_exception = #{restoreException,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
</mapper>
